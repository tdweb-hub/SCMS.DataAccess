//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCMS.DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SCMSEntities : DbContext
    {
        public SCMSEntities()
            : base("name=SCMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Lookup> Lookups { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<SchoolYear> SchoolYears { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int spAddressDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddressDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spAddressInsert(Nullable<int> reference, string nameSpace, string addressType, string addressValue, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var referenceParameter = reference.HasValue ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(int));
    
            var nameSpaceParameter = nameSpace != null ?
                new ObjectParameter("NameSpace", nameSpace) :
                new ObjectParameter("NameSpace", typeof(string));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var addressValueParameter = addressValue != null ?
                new ObjectParameter("AddressValue", addressValue) :
                new ObjectParameter("AddressValue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAddressInsert", referenceParameter, nameSpaceParameter, addressTypeParameter, addressValueParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Address> spAddressSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("spAddressSelectById", idParameter);
        }
    
        public virtual ObjectResult<Address> spAddressSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("spAddressSelectById", mergeOption, idParameter);
        }
    
        public virtual int spAddressUpdate(Nullable<int> id, Nullable<int> reference, string nameSpace, string addressType, string addressValue, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var referenceParameter = reference.HasValue ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(int));
    
            var nameSpaceParameter = nameSpace != null ?
                new ObjectParameter("NameSpace", nameSpace) :
                new ObjectParameter("NameSpace", typeof(string));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var addressValueParameter = addressValue != null ?
                new ObjectParameter("AddressValue", addressValue) :
                new ObjectParameter("AddressValue", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("remark", remark) :
                new ObjectParameter("remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddressUpdate", idParameter, referenceParameter, nameSpaceParameter, addressTypeParameter, addressValueParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual int spBranchDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBranchDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spBranchInsert(string branchName, Nullable<int> schoolId, Nullable<int> branchLocation, Nullable<int> branchAddress, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var branchLocationParameter = branchLocation.HasValue ?
                new ObjectParameter("BranchLocation", branchLocation) :
                new ObjectParameter("BranchLocation", typeof(int));
    
            var branchAddressParameter = branchAddress.HasValue ?
                new ObjectParameter("BranchAddress", branchAddress) :
                new ObjectParameter("BranchAddress", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spBranchInsert", branchNameParameter, schoolIdParameter, branchLocationParameter, branchAddressParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Branch> spBranchSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Branch>("spBranchSelectById", idParameter);
        }
    
        public virtual ObjectResult<Branch> spBranchSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Branch>("spBranchSelectById", mergeOption, idParameter);
        }
    
        public virtual int spBranchUpdate(Nullable<int> id, string branchName, Nullable<int> schoolId, Nullable<int> branchLocation, Nullable<int> branchAddress, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var branchLocationParameter = branchLocation.HasValue ?
                new ObjectParameter("BranchLocation", branchLocation) :
                new ObjectParameter("BranchLocation", typeof(int));
    
            var branchAddressParameter = branchAddress.HasValue ?
                new ObjectParameter("BranchAddress", branchAddress) :
                new ObjectParameter("BranchAddress", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBranchUpdate", idParameter, branchNameParameter, schoolIdParameter, branchLocationParameter, branchAddressParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual int spEmployeeDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spEmployeeInsert(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> userRole, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updateBy, string remark)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spEmployeeInsert", schoolIDParameter, userIDParameter, userRoleParameter, startDateParameter, endDateParameter, createdDateParameter, createdByParameter, updatedDateParameter, updateByParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Employee> spEmployeeSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spEmployeeSelectById", idParameter);
        }
    
        public virtual ObjectResult<Employee> spEmployeeSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spEmployeeSelectById", mergeOption, idParameter);
        }
    
        public virtual int spEmployeeUpdate(Nullable<int> id, Nullable<int> schoolID, Nullable<int> userID, Nullable<int> userRole, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updateBy, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updateByParameter = updateBy.HasValue ?
                new ObjectParameter("UpdateBy", updateBy) :
                new ObjectParameter("UpdateBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmployeeUpdate", idParameter, schoolIDParameter, userIDParameter, userRoleParameter, startDateParameter, endDateParameter, createdDateParameter, createdByParameter, updatedDateParameter, updateByParameter, remarkParameter);
        }
    
        public virtual int spLocationDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLocationDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLocationInsert(Nullable<int> reference, string nameSpace, string country, string city, string woreda, string area, Nullable<decimal> latitude, Nullable<decimal> longtitude, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var referenceParameter = reference.HasValue ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(int));
    
            var nameSpaceParameter = nameSpace != null ?
                new ObjectParameter("NameSpace", nameSpace) :
                new ObjectParameter("NameSpace", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var woredaParameter = woreda != null ?
                new ObjectParameter("Woreda", woreda) :
                new ObjectParameter("Woreda", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longtitudeParameter = longtitude.HasValue ?
                new ObjectParameter("Longtitude", longtitude) :
                new ObjectParameter("Longtitude", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLocationInsert", referenceParameter, nameSpaceParameter, countryParameter, cityParameter, woredaParameter, areaParameter, latitudeParameter, longtitudeParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Location> spLocationSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("spLocationSelectById", idParameter);
        }
    
        public virtual ObjectResult<Location> spLocationSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("spLocationSelectById", mergeOption, idParameter);
        }
    
        public virtual int spLocationUpdate(Nullable<int> id, Nullable<int> reference, string nameSpace, string country, string city, string woreda, string area, Nullable<decimal> latitude, Nullable<decimal> longtitude, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var referenceParameter = reference.HasValue ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(int));
    
            var nameSpaceParameter = nameSpace != null ?
                new ObjectParameter("NameSpace", nameSpace) :
                new ObjectParameter("NameSpace", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var woredaParameter = woreda != null ?
                new ObjectParameter("Woreda", woreda) :
                new ObjectParameter("Woreda", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longtitudeParameter = longtitude.HasValue ?
                new ObjectParameter("Longtitude", longtitude) :
                new ObjectParameter("Longtitude", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLocationUpdate", idParameter, referenceParameter, nameSpaceParameter, countryParameter, cityParameter, woredaParameter, areaParameter, latitudeParameter, longtitudeParameter, createdByParameter, createdDateParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual int spLookupDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLookupDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLookupInsert(string lookupType, string lookupName, string lookupDescription, Nullable<bool> isDefault, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var lookupTypeParameter = lookupType != null ?
                new ObjectParameter("LookupType", lookupType) :
                new ObjectParameter("LookupType", typeof(string));
    
            var lookupNameParameter = lookupName != null ?
                new ObjectParameter("LookupName", lookupName) :
                new ObjectParameter("LookupName", typeof(string));
    
            var lookupDescriptionParameter = lookupDescription != null ?
                new ObjectParameter("LookupDescription", lookupDescription) :
                new ObjectParameter("LookupDescription", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLookupInsert", lookupTypeParameter, lookupNameParameter, lookupDescriptionParameter, isDefaultParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Lookup> spLookupSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lookup>("spLookupSelectById", idParameter);
        }
    
        public virtual ObjectResult<Lookup> spLookupSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lookup>("spLookupSelectById", mergeOption, idParameter);
        }
    
        public virtual int spLookupUpdate(Nullable<int> id, string lookupType, string lookupName, string lookupDescription, Nullable<bool> isDefault, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var lookupTypeParameter = lookupType != null ?
                new ObjectParameter("LookupType", lookupType) :
                new ObjectParameter("LookupType", typeof(string));
    
            var lookupNameParameter = lookupName != null ?
                new ObjectParameter("LookupName", lookupName) :
                new ObjectParameter("LookupName", typeof(string));
    
            var lookupDescriptionParameter = lookupDescription != null ?
                new ObjectParameter("LookupDescription", lookupDescription) :
                new ObjectParameter("LookupDescription", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLookupUpdate", idParameter, lookupTypeParameter, lookupNameParameter, lookupDescriptionParameter, isDefaultParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual int spSchoolDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSchoolDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSchoolInsert(string name, string displayName, string description, Nullable<int> tax, string website, string email, string publicId, Nullable<bool> verificationStatus, Nullable<bool> subscriptionStatus, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(int));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var publicIdParameter = publicId != null ?
                new ObjectParameter("PublicId", publicId) :
                new ObjectParameter("PublicId", typeof(string));
    
            var verificationStatusParameter = verificationStatus.HasValue ?
                new ObjectParameter("VerificationStatus", verificationStatus) :
                new ObjectParameter("VerificationStatus", typeof(bool));
    
            var subscriptionStatusParameter = subscriptionStatus.HasValue ?
                new ObjectParameter("SubscriptionStatus", subscriptionStatus) :
                new ObjectParameter("SubscriptionStatus", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSchoolInsert", nameParameter, displayNameParameter, descriptionParameter, taxParameter, websiteParameter, emailParameter, publicIdParameter, verificationStatusParameter, subscriptionStatusParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual ObjectResult<School> spSchoolSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<School>("spSchoolSelectById", idParameter);
        }
    
        public virtual ObjectResult<School> spSchoolSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<School>("spSchoolSelectById", mergeOption, idParameter);
        }
    
        public virtual int spSchoolUpdate(Nullable<int> id, string name, string displayName, string description, Nullable<int> tax, string website, string email, string publicId, Nullable<bool> verificationStatus, Nullable<bool> subscriptionStatus, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(int));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var publicIdParameter = publicId != null ?
                new ObjectParameter("PublicId", publicId) :
                new ObjectParameter("PublicId", typeof(string));
    
            var verificationStatusParameter = verificationStatus.HasValue ?
                new ObjectParameter("VerificationStatus", verificationStatus) :
                new ObjectParameter("VerificationStatus", typeof(bool));
    
            var subscriptionStatusParameter = subscriptionStatus.HasValue ?
                new ObjectParameter("SubscriptionStatus", subscriptionStatus) :
                new ObjectParameter("SubscriptionStatus", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSchoolUpdate", idParameter, nameParameter, displayNameParameter, descriptionParameter, taxParameter, websiteParameter, emailParameter, publicIdParameter, verificationStatusParameter, subscriptionStatusParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual int spSchoolYearDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSchoolYearDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spSchoolYearInsert(Nullable<int> schoolID, Nullable<int> schoolYear, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spSchoolYearInsert", schoolIDParameter, schoolYearParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual ObjectResult<SchoolYear> spSchoolYearSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SchoolYear>("spSchoolYearSelectById", idParameter);
        }
    
        public virtual ObjectResult<SchoolYear> spSchoolYearSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SchoolYear>("spSchoolYearSelectById", mergeOption, idParameter);
        }
    
        public virtual int spSchoolYearUpdate(Nullable<int> id, Nullable<int> schoolID, Nullable<int> schoolYear, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSchoolYearUpdate", idParameter, schoolIDParameter, schoolYearParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual int spStudentDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStudentDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spStudentInsert(Nullable<int> schoolID, Nullable<int> userID, Nullable<int> schoolYear, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spStudentInsert", schoolIDParameter, userIDParameter, schoolYearParameter, isActiveParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Student> spStudentSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("spStudentSelectById", idParameter);
        }
    
        public virtual ObjectResult<Student> spStudentSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("spStudentSelectById", mergeOption, idParameter);
        }
    
        public virtual int spStudentUpdate(Nullable<int> id, Nullable<int> schoolID, Nullable<int> userID, Nullable<int> schoolYear, Nullable<bool> isActive, Nullable<System.DateTime> createdDate, Nullable<int> createdBy, Nullable<System.DateTime> updatedDate, Nullable<int> updatedBy, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spStudentUpdate", idParameter, schoolIDParameter, userIDParameter, schoolYearParameter, isActiveParameter, createdDateParameter, createdByParameter, updatedDateParameter, updatedByParameter, remarkParameter);
        }
    
        public virtual int spUserDeleteById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserDeleteById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUserInsert(string fullName, string gender, Nullable<System.DateTime> dOB, string phoneNumber, string email, string userName, Nullable<int> address, Nullable<int> location, Nullable<int> failedLoginCount, Nullable<bool> isEnabled, Nullable<bool> isLocked, Nullable<bool> emailVerified, Nullable<bool> pwdChangeRequired, Nullable<System.DateTime> lastLoginTime, Nullable<System.DateTime> lockedTime, Nullable<System.DateTime> passwordChangeDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var addressParameter = address.HasValue ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var failedLoginCountParameter = failedLoginCount.HasValue ?
                new ObjectParameter("FailedLoginCount", failedLoginCount) :
                new ObjectParameter("FailedLoginCount", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("IsLocked", isLocked) :
                new ObjectParameter("IsLocked", typeof(bool));
    
            var emailVerifiedParameter = emailVerified.HasValue ?
                new ObjectParameter("EmailVerified", emailVerified) :
                new ObjectParameter("EmailVerified", typeof(bool));
    
            var pwdChangeRequiredParameter = pwdChangeRequired.HasValue ?
                new ObjectParameter("PwdChangeRequired", pwdChangeRequired) :
                new ObjectParameter("PwdChangeRequired", typeof(bool));
    
            var lastLoginTimeParameter = lastLoginTime.HasValue ?
                new ObjectParameter("LastLoginTime", lastLoginTime) :
                new ObjectParameter("LastLoginTime", typeof(System.DateTime));
    
            var lockedTimeParameter = lockedTime.HasValue ?
                new ObjectParameter("LockedTime", lockedTime) :
                new ObjectParameter("LockedTime", typeof(System.DateTime));
    
            var passwordChangeDateParameter = passwordChangeDate.HasValue ?
                new ObjectParameter("PasswordChangeDate", passwordChangeDate) :
                new ObjectParameter("PasswordChangeDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUserInsert", fullNameParameter, genderParameter, dOBParameter, phoneNumberParameter, emailParameter, userNameParameter, addressParameter, locationParameter, failedLoginCountParameter, isEnabledParameter, isLockedParameter, emailVerifiedParameter, pwdChangeRequiredParameter, lastLoginTimeParameter, lockedTimeParameter, passwordChangeDateParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual ObjectResult<User> spUserSelectById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("spUserSelectById", idParameter);
        }
    
        public virtual ObjectResult<User> spUserSelectById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("spUserSelectById", mergeOption, idParameter);
        }
    
        public virtual int spUserUpdate(Nullable<int> id, string fullName, string gender, Nullable<System.DateTime> dOB, string phoneNumber, string email, string userName, Nullable<int> address, Nullable<int> location, Nullable<int> failedLoginCount, Nullable<bool> isEnabled, Nullable<bool> isLocked, Nullable<bool> emailVerified, Nullable<bool> pwdChangeRequired, Nullable<System.DateTime> lastLoginTime, Nullable<System.DateTime> lockedTime, Nullable<System.DateTime> passwordChangeDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, string remark)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var addressParameter = address.HasValue ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            var failedLoginCountParameter = failedLoginCount.HasValue ?
                new ObjectParameter("FailedLoginCount", failedLoginCount) :
                new ObjectParameter("FailedLoginCount", typeof(int));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("IsEnabled", isEnabled) :
                new ObjectParameter("IsEnabled", typeof(bool));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("IsLocked", isLocked) :
                new ObjectParameter("IsLocked", typeof(bool));
    
            var emailVerifiedParameter = emailVerified.HasValue ?
                new ObjectParameter("EmailVerified", emailVerified) :
                new ObjectParameter("EmailVerified", typeof(bool));
    
            var pwdChangeRequiredParameter = pwdChangeRequired.HasValue ?
                new ObjectParameter("PwdChangeRequired", pwdChangeRequired) :
                new ObjectParameter("PwdChangeRequired", typeof(bool));
    
            var lastLoginTimeParameter = lastLoginTime.HasValue ?
                new ObjectParameter("LastLoginTime", lastLoginTime) :
                new ObjectParameter("LastLoginTime", typeof(System.DateTime));
    
            var lockedTimeParameter = lockedTime.HasValue ?
                new ObjectParameter("LockedTime", lockedTime) :
                new ObjectParameter("LockedTime", typeof(System.DateTime));
    
            var passwordChangeDateParameter = passwordChangeDate.HasValue ?
                new ObjectParameter("PasswordChangeDate", passwordChangeDate) :
                new ObjectParameter("PasswordChangeDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserUpdate", idParameter, fullNameParameter, genderParameter, dOBParameter, phoneNumberParameter, emailParameter, userNameParameter, addressParameter, locationParameter, failedLoginCountParameter, isEnabledParameter, isLockedParameter, emailVerifiedParameter, pwdChangeRequiredParameter, lastLoginTimeParameter, lockedTimeParameter, passwordChangeDateParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, remarkParameter);
        }
    
        public virtual ObjectResult<Address> spAddressSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("spAddressSelectAll");
        }
    
        public virtual ObjectResult<Address> spAddressSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Address>("spAddressSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<Branch> spBranchSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Branch>("spBranchSelectAll");
        }
    
        public virtual ObjectResult<Branch> spBranchSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Branch>("spBranchSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<Employee> spEmployeeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spEmployeeSelectAll");
        }
    
        public virtual ObjectResult<Employee> spEmployeeSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee>("spEmployeeSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<Location> spLocationSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("spLocationSelectAll");
        }
    
        public virtual ObjectResult<Location> spLocationSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("spLocationSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<Lookup> spLookupSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lookup>("spLookupSelectAll");
        }
    
        public virtual ObjectResult<Lookup> spLookupSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lookup>("spLookupSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<School> spSchoolSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<School>("spSchoolSelectAll");
        }
    
        public virtual ObjectResult<School> spSchoolSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<School>("spSchoolSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<SchoolYear> spSchoolYearSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SchoolYear>("spSchoolYearSelectAll");
        }
    
        public virtual ObjectResult<SchoolYear> spSchoolYearSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SchoolYear>("spSchoolYearSelectAll", mergeOption);
        }
    
        public virtual ObjectResult<Student> spStudentSelectAll(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("spStudentSelectAll", idParameter);
        }
    
        public virtual ObjectResult<Student> spStudentSelectAll(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("spStudentSelectAll", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<User> spUserSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("spUserSelectAll");
        }
    
        public virtual ObjectResult<User> spUserSelectAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("spUserSelectAll", mergeOption);
        }
    }
}
